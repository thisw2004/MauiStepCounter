@page "/blog/{id}"
@using maui.components.ViewModels
@inject BlogViewModel ViewModel

<h1>Blog Detail Page</h1>

<p>Blog ID: @Id</p>

@if (ViewModel.SelectedBlog?.Title == null)
{
    <p>Loading blog details...</p>
}
else
{
    @if (ViewModel.SelectedBlog?.Title != null)
    {
        <h2>Title: @ViewModel.SelectedBlog.Title</h2>
    }
    else
    {
        <p>No Title found</p>
    }
    @if (ViewModel.SelectedBlog?.Content != null)
    {
        <p>Content: @ViewModel.SelectedBlog.Content</p>
    }
    else
    {
        <p>No content found</p>
    }
    @if (ViewModel.SelectedBlog?.Content != null)
    {
        <p>Author: @ViewModel.SelectedBlog.Author</p>
    }
    else
    {
        <p>No content found</p>
    }
    @if (ViewModel.SelectedBlog?.Content != null)
    {
        <p>Date: @ViewModel.SelectedBlog.CreatedAt</p>
    }
    else
    {
        <p>No content found</p>
    }
}

@code {
    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(Id))
        {
            if (int.TryParse(Id, out int blogId))
            {
                try
                {
                    ViewModel.SelectedBlog = await ViewModel.GetBlogByIdAsync(blogId);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error fetching blog details: {ex.Message}");
                    // Display user-friendly error message (optional)
                }
            }
            else
            {
                // Handle invalid ID
                Console.WriteLine("Invalid blog ID.");
            }
        }
        else
        {
            // Handle missing ID
            Console.WriteLine("Blog ID not provided.");
        }
    }
}