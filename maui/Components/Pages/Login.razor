@page "/"
@using maui.Components.Layout
@using maui.components.ViewModels
@using Models
@*navigation*@
@inject NavigationManager NavigationManager

@layout LayoutWithoutNav
<h3>Login</h3>


@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p>@ErrorMessage</p>
}

<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
    <label for="email" name="email">Username</label>
    <input type="text" id="email" @bind="loginModel.Email" />
    <ValidationMessage For="@(() => loginModel.Email)" />

    <br />

    <label for="password" name="password">Password</label>
    <input type="password" id="password" @bind="loginModel.Password" />
    <ValidationMessage For="@(() => loginModel.Password)" />

    <br />

    <button type="submit">Login</button>
</EditForm>

<p>No account? Register <u><a href="/register">here</a></u></p>

@code {
    private LoginModel loginModel = new LoginModel();
    string ErrorMessage; // Assuming this stays private

    private async Task HandleLogin()
    {
        var viewModel = new LoginViewModel(NavigationManager);
    viewModel.Email = loginModel.Email;
    viewModel.Password = loginModel.Password;

    var loginResult = await viewModel.Login();
    
    ErrorMessage = loginResult ?? "Login failed";
    
    
   
    /*await Shell.Current.GoToAsync("/home");*/
    }
    
    
    
    
}