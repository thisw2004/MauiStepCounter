@page "/UpdateStepgoal"
@using maui.Components.Models
@inject StepgoalViewModel viewModel
@inject NavigationManager Navigation

<h1>Update Today's Step Goal</h1>

@if (!viewModel.IsSuccessful)
{
    <p>Error fetching step goal. Please try again later.</p>
}
else if (!viewModel.IsSuccessful && viewModel.ErrorMessage != "")
{
    <p>@viewModel.ErrorMessage</p>
}
else if (!viewModel.IsSuccessful)
{
    <p>No step goal found for today.</p>
}
else
{
    var castedViewModel = (StepgoalViewModel)viewModel;

    <form @submit="@(() => {  // No method call here
                       // Handle form submission logic (optional)
                       return Task.CompletedTask;
                   })">
        <input type="hidden" value="@viewModel.GoalToUpdate?.Id" />

        <p>Current goal(s) for today:</p>
        @foreach (var goal in castedViewModel.AllStepgoals.Where(sg => sg.Date.Date == DateTime.Today.Date))
        {
            <p>@goal.Goal</p>
        }
        <label for="goal">New Goal :</label>
        <input type="number" id="goal" @bind="viewModel.Goal" placeholder="Enter new goal"/>

        <br/>
        <button type="submit" @onclick="viewModel.UpdateStepgoal">Update</button>

    </form>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        await viewModel.LoadTodayStepgoals();
    }
}